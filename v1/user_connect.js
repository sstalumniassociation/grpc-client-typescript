// @generated by protoc-gen-connect-es v1.4.0
// @generated from file Protos/v1/user.proto (package user.v1, syntax proto3)
/* eslint-disable */
// @ts-nocheck

import { BatchCreateUsersRequest, BatchCreateUsersResponse, BindUserRequest, CreateUserRequest, DeleteUserRequest, GetUserRequest, ListUsersRequest, ListUsersResponse, UpdateUserRequest, User } from "./user_pb.js";
import { Empty, MethodKind } from "@bufbuild/protobuf";

/**
 * User service
 *
 * @generated from service user.v1.UserService
 */
export const UserService = {
  typeName: "user.v1.UserService",
  methods: {
    /**
     * List all users, restricted to EXCO
     *
     * @generated from rpc user.v1.UserService.ListUsers
     */
    listUsers: {
      name: "ListUsers",
      I: ListUsersRequest,
      O: ListUsersResponse,
      kind: MethodKind.Unary,
    },
    /**
     * Get user information, restricted to authenticated users
     *
     * @generated from rpc user.v1.UserService.GetUser
     */
    getUser: {
      name: "GetUser",
      I: GetUserRequest,
      O: User,
      kind: MethodKind.Unary,
    },
    /**
     * Bind user to a Firebase ID. Although this can also be done in the UpdateUser route, due to the different 
     * permission requirement for updating FirebaseId, it would introduce a partial success state for the endpoint (where
     * only the FirebaseId is updated of all fields provided in the UpdateMask). Therefore, a separate route exists for
     * this specific use case. This route should be called by end-users only (not admins) as it will bind the user ID 
     * provided to the current authenticated user.
     *
     * @generated from rpc user.v1.UserService.BindUser
     */
    bindUser: {
      name: "BindUser",
      I: BindUserRequest,
      O: User,
      kind: MethodKind.Unary,
    },
    /**
     * Create users
     *
     * @generated from rpc user.v1.UserService.CreateUser
     */
    createUser: {
      name: "CreateUser",
      I: CreateUserRequest,
      O: User,
      kind: MethodKind.Unary,
    },
    /**
     * Batch create users
     *
     * @generated from rpc user.v1.UserService.BatchCreateUsers
     */
    batchCreateUsers: {
      name: "BatchCreateUsers",
      I: BatchCreateUsersRequest,
      O: BatchCreateUsersResponse,
      kind: MethodKind.Unary,
    },
    /**
     * Update user
     *
     * @generated from rpc user.v1.UserService.UpdateUser
     */
    updateUser: {
      name: "UpdateUser",
      I: UpdateUserRequest,
      O: User,
      kind: MethodKind.Unary,
    },
    /**
     * Delete user
     *
     * @generated from rpc user.v1.UserService.DeleteUser
     */
    deleteUser: {
      name: "DeleteUser",
      I: DeleteUserRequest,
      O: Empty,
      kind: MethodKind.Unary,
    },
  }
};

